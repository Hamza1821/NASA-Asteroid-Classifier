# -*- coding: utf-8 -*-
"""nasa-asteroid-classifier

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/#fileId=https%3A//storage.googleapis.com/kaggle-colab-exported-notebooks/nasa-asteroid-classifier-faeb33ee-1040-4f22-889d-8aaf984d8007.ipynb%3FX-Goog-Algorithm%3DGOOG4-RSA-SHA256%26X-Goog-Credential%3Dgcp-kaggle-com%2540kaggle-161607.iam.gserviceaccount.com/20241122/auto/storage/goog4_request%26X-Goog-Date%3D20241122T082144Z%26X-Goog-Expires%3D259200%26X-Goog-SignedHeaders%3Dhost%26X-Goog-Signature%3D43e43453009bede3eb09e6ebe052c1163e7a0aa239fb5dc8cf076dc743302ecc8c856e0243b84bb8f76b576b692949e215d3c2b02030113a464c665b018da00ca039605d159757efa4663dcc8454b21b77007937ea72f1e95a5008dd45d4513a84e10808392560b2e4d61abcea10f4340cd20a55814a8deff807d9caeb714274b09a81393ec19cdb7fef9fc79e36d40f12a549d45b07db6f8c71194bf88e55802f97794e758294ae28b7a9306bdd7b5ebec060c3f5bc0f49cd748d588ee4214339246e260b4e55e9570a5fb249fc18307cde889ebafa1ff25d5305b661f0467b4572dc09fdfb1a1fd8440c6279f0915f1c4c45ac5daccd5751567aa98f89d7e9
"""

# IMPORTANT: RUN THIS CELL IN ORDER TO IMPORT YOUR KAGGLE DATA SOURCES,
# THEN FEEL FREE TO DELETE THIS CELL.
# NOTE: THIS NOTEBOOK ENVIRONMENT DIFFERS FROM KAGGLE'S PYTHON
# ENVIRONMENT SO THERE MAY BE MISSING LIBRARIES USED BY YOUR
# NOTEBOOK.
import kagglehub
shrutimehta_nasa_asteroids_classification_path = kagglehub.dataset_download('shrutimehta/nasa-asteroids-classification')

print('Data source import complete.')

import numpy as np # linear algebra
import pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)
import matplotlib.pyplot as plt
import seaborn as sns

"""**Reading CSV**"""

df=pd.read_csv('/kaggle/input/nasa-asteroids-classification/nasa.csv')
df.head()

df.shape

df.info()

df=df.drop(['Neo Reference ID','Name', 'Orbit ID','Close Approach Date','Epoch Date Close Approach','Orbit Determination Date'],axis=1)

df_labels=pd.get_dummies(df['Hazardous']).astype(int)
df_labels

df=pd.concat([df,df_labels],axis=1)

df.head()

df=df.drop(['Orbiting Body', 'Equinox'],axis=1)

plt.figure(figsize=(20,20))
sns.heatmap(df.corr(),annot=True)

df.info()

df=df.drop(['Est Dia in KM(max)','Est Dia in M(max)', 'Est Dia in M(min)','Est Dia in Miles(min)','Est Dia in Miles(max)',
           'Est Dia in Feet(min)','Est Dia in Feet(max)','Relative Velocity km per hr','Miles per hour',
           'Miss Dist.(lunar)','Miss Dist.(kilometers)','Miss Dist.(miles)','Hazardous'], axis=1)

df.head()

plt.figure(figsize=(20,20))
sns.heatmap(df.corr(),annot=True)

df=df.drop([False],axis=1)

"""# ****Building model"""

x=df.drop([True],axis=1)
y=df[True]

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test =train_test_split(x,y, random_state=0,test_size=0.3)

from xgboost import XGBClassifier
from matplotlib import pyplot
from xgboost import plot_importance

xgb_model=XGBClassifier()

xgb_model.fit(x_train,y_train)
plot_importance(xgb_model)
pyplot.show()

from sklearn.metrics import accuracy_score , confusion_matrix , classification_report
predictions=xgb_model.predict(x_test)
acc=accuracy_score(y_test, predictions)
print(str(np.round(acc*100,2))+'%')
print(classification_report(y_test,predictions))
print(confusion_matrix(y_test,predictions))

